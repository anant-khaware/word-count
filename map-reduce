import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class WordCount {
	public static class MyMapper extends Mapper<LongWritable,Text,Text,LongWritable>{
		
		
		  public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException
		
			{
				String line= value.toString();//deserialize
				String[] parts=line.split("\\W");
				int a= parts.length;
				for(int i=0;i<a;i++)
				{
					String word=parts[i];
					long b=1;
					context.write(new Text(word),new LongWritable(b));
					
				}
				
			}
	}
	public static class MyReducer extends Reducer<Text,LongWritable,Text,LongWritable> 
	{
		public void reduce(Text key,Iterable<LongWritable> values,Context context) throws IOException, InterruptedException
		{
			long sum=0;
			for(LongWritable value:values)
			{
				sum=sum+value.get();
			}
			context.write(key,new LongWritable(sum));
		}
	}
	
			
		
	
	@SuppressWarnings("deprecation")
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration conf= new Configuration();
		Job job= new Job(conf,"WordCount");
		job.setJarByClass(WordCount.class);
		job.setMapperClass(MyMapper.class);
		job.setReducerClass(MyReducer.class);
		job.setCombinerClass(MyReducer.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(LongWritable.class);
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(LongWritable.class);
	    FileInputFormat.addInputPath(job,new Path(args[0]));
	    FileOutputFormat.setOutputPath(job,new Path(args[1]));
	    System.exit(job.waitForCompletion(true)?0:1);	

	}

}
